plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.0'
    id 'top.niunaijun.blackobfuscator'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "moe.ore.txhook"
        minSdk 23
        //noinspection ExpiredTargetSdkVersion
        targetSdk 29
        versionCode 13029
        versionName "2.0.267"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            //代码压缩
            minifyEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
    packagingOptions {
        exclude 'META-INF/*'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/io.netty.versions.properties'
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}


BlackObfuscator {
    // 是否启用
    enabled false
    // 混淆深度
    depth 2
    // 需要混淆的包或者类(匹配前面一段)
    obfClass = ["moe.ore.xposed.main", "moe.ore.txhook.app.fragment"]
    // blackClass中的包或者类不会进行混淆(匹配前面一段)
    blackClass = ["moe.ore.txhook.app.ui"]
}

dependencies {
    implementation 'androidx.drawerlayout:drawerlayout:1.1.1'

    compileOnly 'de.robv.android.xposed:api:82'

    // 数据处理的库
    implementation("com.google.code.gson:gson:2.10.1")
    implementation("com.squareup.okhttp3:okhttp:5.0.0-alpha.2") // 千万不要更新
    implementation 'org.jetbrains.kotlinx:kotlinx-io-jvm:0.1.16'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-protobuf:1.3.0'
    implementation files('libs/protobuf-java-3.5.1.jar')

    // ui交互的库
    // implementation 'io.github.lapism:search:1.1.0' require sdk 31
    implementation 'com.rengwuxian.materialedittext:library:2.1.4'
    implementation 'com.leon:lsettingviewlibrary:1.7.0'
    implementation 'lib.kingja.switchbutton:switchbutton:1.1.8'

    // 数据储存
    implementation 'com.tencent:mmkv-static:1.2.10' // 将会导入c++库

    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.5.0-alpha02'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'

    implementation 'org.apache-extras.beanshell:bsh:2.0b6'

    implementation project(":server")

    // implementation project(":app_process")
    /*
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-websockets:$ktor_version"
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    implementation("io.ktor:ktor-client-websockets:$ktor_version")
    实现复杂 废弃
     */
}
